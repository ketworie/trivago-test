openapi: "3.0.3"
info:
  title: "trivago_test API"
  description: "trivago_test API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /accommodations:
    get:
      description: ""
      parameters:
      - name: "hotelierId"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "rating"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "city"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "reputationBadge"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AccommodationDTO"
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AccommodationDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AccommodationDTO"
    put:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AccommodationDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AccommodationDTO"
  /accommodations/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AccommodationDTO"
  /accommodations/{id}/book:
    post:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /accommodations/generate:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
components:
  schemas:
    LocationDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        city:
          type: "string"
        state:
          type: "string"
        country:
          type: "string"
        zipCode:
          type: "integer"
          format: "int32"
        address:
          type: "string"
    AccommodationDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        hotelierId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        rating:
          type: "integer"
          format: "int32"
        category:
          type: "string"
        location:
          $ref: "#/components/schemas/LocationDTO"
        image:
          type: "string"
        reputation:
          type: "integer"
          format: "int32"
        reputationBadge:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        availability:
          type: "integer"
          format: "int32"
        version:
          type: "integer"
          format: "int64"